
package intraplex.livelook;

import static intraplex.livelook.IPLinkNetworkTool.livelookconfig;

import java.io.IOException;
import java.util.Vector;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jlucas
 */


public class MacList extends javax.swing.JPanel {

	DefaultTableModel model;
	MacFile file;
	
    /**
     * Creates new form MacList
     */
    public MacList() {
        initComponents();
        
        try {
        	String filename = livelookconfig.get("MacFileLocation").toString();
        	loadFile(filename);
        }
        catch(Exception e) {
        	
        }
    }
    
    public String[] getRows() {
    	if(model == null)
    		return new String[0];
    	String[] strings = new String[model.getRowCount()];
    	for(int x = 0; x < model.getRowCount(); x++){
    		strings[x] = (String) model.getValueAt(x, 0);
    	}
    	return strings;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoadFile = new javax.swing.JButton();
        MacPane = new javax.swing.JScrollPane();
        MacTable = new javax.swing.JTable();

        LoadFile.setText("LoadFile");
        LoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFileActionPerformed(evt);
            }
        });

        MacTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mac Addresses"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        MacPane.setViewportView(MacTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MacPane, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(LoadFile)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MacPane, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LoadFile)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadFile(String fileName) {
    	file = new MacFile(fileName);

        byte[] byteUnecrypted = new byte[0];

        try {
            byteUnecrypted = file.decrypt(file.load());
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (BadPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        String loadString = new String(byteUnecrypted);

        String[] parts = loadString.split(",");

        model = new DefaultTableModel();
        model.addColumn("Mac Addresses");
        
        for(int x = 0; x < parts.length; x++){
        	Vector temp = new Vector();
        	temp.add(parts[x]);
            model.addRow(temp);
        }
        MacTable.setModel(model);
    }
    
    private void LoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileActionPerformed
        JFileChooser chooser = new JFileChooser();

        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
        	String fileName = chooser.getSelectedFile().getAbsolutePath();
            file = new MacFile(fileName);
            
            livelookconfig.setProperty("MacFileLocation", fileName);
            livelookconfig.save();

            byte[] byteUnecrypted = new byte[0];

            try {
                byteUnecrypted = file.decrypt(file.load());
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IllegalBlockSizeException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (BadPaddingException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            String loadString = new String(byteUnecrypted);

            String[] parts = loadString.split(",");

            model = new DefaultTableModel();
            model.addColumn("Mac Addresses");
            
            for(int x = 0; x < parts.length; x++){
            	Vector temp = new Vector();
            	temp.add(parts[x]);
                model.addRow(temp);
            }
            MacTable.setModel(model);
        }
        else {
            JOptionPane.showMessageDialog(this, "Please reselect the desired file.");
        }

    }//GEN-LAST:event_LoadFileActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LoadFile;
    private javax.swing.JScrollPane MacPane;
    private javax.swing.JTable MacTable;
    // End of variables declaration//GEN-END:variables
}
