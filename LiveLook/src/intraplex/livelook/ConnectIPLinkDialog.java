package intraplex.livelook;

import static intraplex.livelook.IPLinkNetworkTool.config;
import static intraplex.livelook.IPLinkNetworkTool_Lite.configlite;

import java.net.InetAddress;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jschreiv
 */
public class ConnectIPLinkDialog extends javax.swing.JDialog {
    private String dPort;
    boolean lite;
    public String readCom;

    /**
     * Creates new form ConnectIPLinkDialog
     */
    public ConnectIPLinkDialog(java.awt.Frame parent, boolean modal, boolean lite) {
        super(parent, modal);
        this.lite = lite;
        setTitle("Connect to Stream");
        initComponents();
        
        loadConfiguation();
        if(!lite) {
	        enableEmailAlarms.setSelected(LogMapEntry.default_enableEmail);
	        enableDataLogging.setSelected(LogMapEntry.default_enableStreamLogging);
        }
        else {
        	enableEmailAlarms.setSelected(false);
	        enableDataLogging.setSelected(false);
        }
        enableEmailAlarms.setSelected(LogMapEntry.default_enableEmail);
        NetXpressBox.setSelected(true);
        FullMonitoring.setSelected(true);
        alarmThresholdTime.setText(LogMapEntry.default_alarmthresholdTime + "");
        StreamDownAlarm.setSelected(LogMapEntry.default_lossRateAlarmEnabled);
        enableDataLogging.setSelected(LogMapEntry.default_enableStreamLogging);
        
        LogMapEntry.next_lossRateAlarmEnabled = LogMapEntry.default_lossRateAlarmEnabled;
        LogMapEntry.next_lossRateCorrectedAlarmEnabled = LogMapEntry.default_lossRateCorrectedAlarmEnabled;
        LogMapEntry.next_enableEmail = LogMapEntry.default_enableEmail;
        LogMapEntry.next_lossRateAlarm = LogMapEntry.default_lossRateAlarm;
        LogMapEntry.next_lossRateCorrectedAlarm = LogMapEntry.default_lossRateCorrectedAlarm;
        LogMapEntry.next_alarmthresholdTime = LogMapEntry.default_alarmthresholdTime;
        LogMapEntry.next_enableStreamLogging = LogMapEntry.default_enableStreamLogging;
        LogMapEntry.next_useDefault = (lite)?false:true;
        
        useDefaultBox.setSelected((lite)?false:true);
        useDefaultSet((lite)?false:(!(useDefaultBox.isSelected())));
        if(lite)useDefaultBox.setEnabled(false);
    }

    public void loadConfiguation()     
    {
        try
        {
        	String ipaddress = (lite)?configlite.get("Last.IP").toString():config.get("Last.IP").toString();
        	ipAddress.setText(ipaddress);
        	String index= (lite)?configlite.get("Last.Index").toString():config.get("Last.Index").toString();
            streamIndex.setText(index);
            String readCom = (lite)?configlite.get("Last.ReadCommunity").toString():config.get("Last.readCommunity").toString();
            readCommunity.setText(readCom);
            //EnableLoggingCheckBox.setSelected(true);
            
        }
        catch (Exception e)
        {
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ipAddress = new javax.swing.JTextField();
        streamIndex = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        alarmThresholdLabel2 = new javax.swing.JLabel();
        alarmThresholdTime = new javax.swing.JTextField();
        AlarmThresholdLabel1 = new javax.swing.JLabel();
        enableEmailAlarms = new javax.swing.JCheckBox();
        useDefaultBox = new javax.swing.JCheckBox();
        enableDataLogging = new javax.swing.JCheckBox();
        StreamDownAlarm = new javax.swing.JCheckBox();
        ShutDownAlarm = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        readCommunity = new javax.swing.JTextField();
        NetXpressBox = new javax.swing.JCheckBox();
        NetXpressLXBox = new javax.swing.JCheckBox();
        NetXpressLXRBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        StatusOnly = new javax.swing.JCheckBox();
        FullMonitoring = new javax.swing.JCheckBox();

        jLabel3.setText("IP Address");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("IP Address");

        jLabel2.setText("Stream Index");

        ipAddress.setText("192.168.1.1");
        ipAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipAddressActionPerformed(evt);
            }
        });

        streamIndex.setText("1");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Alarm Settings"));

        alarmThresholdLabel2.setText("seconds");

        alarmThresholdTime.setText("30");
        alarmThresholdTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alarmThresholdTimeActionPerformed(evt);
            }
        });

        AlarmThresholdLabel1.setText("  Alarm Threshold Time");

        enableEmailAlarms.setText("Enable Email Alarms");
        enableEmailAlarms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableEmailAlarmsActionPerformed(evt);
            }
        });

        useDefaultBox.setText("Use Default");
        useDefaultBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useDefaultBoxActionPerformed(evt);
            }
        });

        enableDataLogging.setText("Enable Logging");
        enableDataLogging.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableDataLoggingActionPerformed(evt);
            }
        });

        StreamDownAlarm.setText("Stream Down");
        StreamDownAlarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StreamDownAlarmActionPerformed(evt);
            }
        });

        ShutDownAlarm.setText("Stream Shut Down");
        ShutDownAlarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShutDownAlarmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(AlarmThresholdLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alarmThresholdTime, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alarmThresholdLabel2)
                        .addGap(136, 136, 136))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(StreamDownAlarm)
                                .addGap(18, 18, 18)
                                .addComponent(ShutDownAlarm))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(enableEmailAlarms)
                                    .addComponent(useDefaultBox))
                                .addGap(40, 40, 40)
                                .addComponent(enableDataLogging, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StreamDownAlarm)
                    .addComponent(ShutDownAlarm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AlarmThresholdLabel1)
                    .addComponent(alarmThresholdTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alarmThresholdLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enableEmailAlarms)
                    .addComponent(enableDataLogging))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(useDefaultBox)
                .addGap(67, 67, 67))
        );

        jLabel4.setText("Read Community");

        readCommunity.setText("public");
        readCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readCommunityActionPerformed(evt);
            }
        });

        NetXpressBox.setText("NetXpress");
        NetXpressBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NetXpressBoxActionPerformed(evt);
            }
        });

        NetXpressLXBox.setText("NetXpressLX");
        NetXpressLXBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NetXpressLXBoxActionPerformed(evt);
            }
        });

        NetXpressLXRBox.setText("NetXpressLXR");
        NetXpressLXRBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NetXpressLXRBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Stream Type");

        jLabel6.setText("Stream Monitoring");

        StatusOnly.setText("Stream Status Only");
        StatusOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusOnlyActionPerformed(evt);
            }
        });

        FullMonitoring.setText("Full Stream Monitoring");
        FullMonitoring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FullMonitoringActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(FullMonitoring)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(StatusOnly)
                                .addGap(11, 11, 11))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(NetXpressBox)
                                .addGap(18, 18, 18)
                                .addComponent(NetXpressLXBox)
                                .addGap(18, 18, 18)
                                .addComponent(NetXpressLXRBox))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(readCommunity)
                                        .addGap(142, 142, 142))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ipAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(streamIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(streamIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(readCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NetXpressBox)
                    .addComponent(NetXpressLXBox)
                    .addComponent(NetXpressLXRBox)
                    .addComponent(jLabel5))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(StatusOnly)
                    .addComponent(FullMonitoring))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
       
    iPAddress = ipAddress.getText();
    dPort = "5000";
    readCom = readCommunity.getText();
    stream = streamIndex.getText();
   // enableLogging = EnableLoggingCheckBox.isSelected();
   //Add Validation Check
    
    if (!stream.matches("\\d|1[012]"))
    {
        JOptionPane.showMessageDialog(this, "Stream must be a valid interget between 1-12");
        return;
    }
     if (!iPAddress.matches("([01]?\\d\\d?|2([0-4]\\d|5[0-5]))(\\.([01]?\\d\\d?|2([0-4]\\d|5[0-5]))){3}"))
    {
        JOptionPane.showMessageDialog(this, "IP Address is not valid");
        return;
    }
     if (!dPort.matches("(\\d+)"))
    {
        JOptionPane.showMessageDialog(this, "Port not valid");
        return;
    }
   
        LogMapEntry.next_enableEmail = enableEmailAlarms.isSelected();
        
        try
        {
            int value = Integer.parseInt(alarmThresholdTime.getText());
            if (value < 5)
            {
               JOptionPane.showMessageDialog(this.getParent(),"Minimum alarm threshold time is 5 seconds");
               value = 5;
               LogMapEntry.next_alarmthresholdTime = value;
            }
            else if ((value % 5)>0)
            {
                value = value - (value % 5);
            }
            LogMapEntry.next_alarmthresholdTime = value;
            
        }
        catch ( NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this.getParent(),"Invalid alarm threshold");
            return;
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this.getParent(),"Invalid alarm threshold");
            return;
        }
        if(StreamDownAlarm.isSelected() && FullMonitoring.isSelected()) {
        	LogMapEntry.next_lossRateAlarmEnabled = true;
        }
        LogMapEntry.next_useDefault = useDefaultBox.isSelected();
        LogMapEntry.next_enableStreamLogging = enableDataLogging.isSelected();
        SnmpMgr.nextStreamType = getSelectedStreamType();
        LogMapEntry.nextStreamType = getSelectedStreamType();
        SnmpMgr.statusOnly = getSelectedMonitoringType();
        
        if(!lite) {
        	config.put("Last.IP",iPAddress);
    	    config.put("Last.Index",stream);
    	    config.put("Last.ReadCommunity", readCom);
    	    config.save();
        }
        else {
        	configlite.put("Last.IP",iPAddress);
    	    configlite.put("Last.Index",stream);
    	    configlite.put("Last.ReadCommunity", readCom);
    	    configlite.save();
        }
        
    //JOptionPane.showMessageDialog(this, enableLogging);
    setVisible(false);
    dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private int getSelectedStreamType() {
    	if(NetXpressBox.isSelected()) 
    	{
    		return 0;
    	}else 
    		if(NetXpressLXBox.isSelected()) 
    	{
    		return 1;
    	}else 
    		if(NetXpressLXRBox.isSelected()) 
    	{
    		return 2;
    	}
    	return 0;
    }
    
    private boolean getSelectedMonitoringType() {
    	if(FullMonitoring.isSelected()) 
    	{
    		return false;
    	}else {
    		return true;
    	}
    }
    
    private void ipAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ipAddressActionPerformed

        private void useDefaultSet (boolean b)
        {
        enableEmailAlarms.setEnabled(b);
        enableDataLogging.setEnabled(b);
        alarmThresholdTime.setEnabled(b);
        AlarmThresholdLabel1.setEnabled(b);
        alarmThresholdLabel2.setEnabled(b);
        StreamDownAlarm.setEnabled(b);

        if(b) {
	        if(StatusOnly.isSelected()) {
	            ShutDownAlarm.setEnabled(b);
	        }
        }
        else {
            ShutDownAlarm.setEnabled(b);
        }
    }
    private void readCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_readCommunityActionPerformed

    private void NetXpressBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NetXpressBoxActionPerformed
        NetXpressLXBox.setSelected(false);
        NetXpressLXRBox.setSelected(false);
    }//GEN-LAST:event_NetXpressBoxActionPerformed

    private void NetXpressLXBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NetXpressLXBoxActionPerformed
    	NetXpressBox.setSelected(false);
        NetXpressLXRBox.setSelected(false);
    }//GEN-LAST:event_NetXpressLXBoxActionPerformed

    private void NetXpressLXRBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NetXpressLXRBoxActionPerformed
    	NetXpressLXBox.setSelected(false);
        NetXpressBox.setSelected(false);
    }//GEN-LAST:event_NetXpressLXRBoxActionPerformed

    private void StatusOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusOnlyActionPerformed
        FullMonitoring.setSelected(false);
        if(!useDefaultBox.isSelected()) {
	    	ShutDownAlarm.setEnabled(true);
	    	StreamDownAlarm.setSelected(SnmpMgr.StreamDownAlarm);
	        ShutDownAlarm.setSelected(SnmpMgr.ShutDownAlarm);
        }
        else {
	    	StreamDownAlarm.setSelected(SnmpMgr.DefaultStreamDownAlarm);
	        ShutDownAlarm.setSelected(SnmpMgr.DefaultShutDownAlarm);
        }
        
    }//GEN-LAST:event_StatusOnlyActionPerformed

    private void FullMonitoringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FullMonitoringActionPerformed
    	StatusOnly.setSelected(false);
        if(!useDefaultBox.isSelected()) {
	    	ShutDownAlarm.setEnabled(false);
        }
        StreamDownAlarm.setSelected(false);
        ShutDownAlarm.setSelected(false);
    }//GEN-LAST:event_FullMonitoringActionPerformed

    private void ShutDownAlarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShutDownAlarmActionPerformed
        if(StatusOnly.isSelected())
        	SnmpMgr.ShutDownAlarm = ShutDownAlarm.isSelected();
    }//GEN-LAST:event_ShutDownAlarmActionPerformed

    private void StreamDownAlarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StreamDownAlarmActionPerformed
        SnmpMgr.StreamDownAlarm = StreamDownAlarm.isSelected();
    }//GEN-LAST:event_StreamDownAlarmActionPerformed

    private void enableDataLoggingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableDataLoggingActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_enableDataLoggingActionPerformed

    private void useDefaultBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useDefaultBoxActionPerformed

        // TODO add your handling code here:
        /*enableLossRateAlarm.setEnabled(useDefaultBox.isSelected());
        enableLossRateCorAlarm.setEnabled(useDefaultBox.isSelected());
        lossRatePercent.setEnabled(useDefaultBox.isSelected());
        afterCorrectPer.setEnabled(useDefaultBox.isSelected());
        enableEmailAlarms.setEnabled(useDefaultBox.isSelected());
        enableDataLogging.setEnabled(useDefaultBox.isSelected());*/

        useDefaultSet(!(useDefaultBox.isSelected()));
    }//GEN-LAST:event_useDefaultBoxActionPerformed

    private void enableEmailAlarmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableEmailAlarmsActionPerformed

    }//GEN-LAST:event_enableEmailAlarmsActionPerformed

    private void alarmThresholdTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alarmThresholdTimeActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_alarmThresholdTimeActionPerformed

    String iPAddress;
    String stream;
    //boolean enableLogging;

    public String getiPAddress() {
        return iPAddress;
    }

    public void setiPAddress(String iPAddress) {
        this.iPAddress = iPAddress;
    }
    
    public String getDPort() {
        return dPort;
    }

    public void setDPort(String dPort) {
        this.dPort = dPort;
    }

    public String getStream() {
        return stream;
    }

    public void setStream(String stream) {
        this.stream = stream;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AlarmThresholdLabel1;
    private javax.swing.JCheckBox FullMonitoring;
    private javax.swing.JCheckBox NetXpressBox;
    private javax.swing.JCheckBox NetXpressLXBox;
    private javax.swing.JCheckBox NetXpressLXRBox;
    private javax.swing.JCheckBox ShutDownAlarm;
    private javax.swing.JCheckBox StatusOnly;
    private javax.swing.JCheckBox StreamDownAlarm;
    private javax.swing.JLabel alarmThresholdLabel2;
    private javax.swing.JTextField alarmThresholdTime;
    private javax.swing.JCheckBox enableDataLogging;
    private javax.swing.JCheckBox enableEmailAlarms;
    private javax.swing.JTextField ipAddress;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField readCommunity;
    private javax.swing.JTextField streamIndex;
    private javax.swing.JCheckBox useDefaultBox;
    // End of variables declaration//GEN-END:variables
}
