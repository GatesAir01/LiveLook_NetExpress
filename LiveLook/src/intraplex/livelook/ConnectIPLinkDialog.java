package intraplex.livelook;

import static intraplex.livelook.IPLinkNetworkTool.config;
import static intraplex.livelook.IPLinkNetworkTool_Lite.configlite;

import java.net.InetAddress;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jschreiv
 */
public class ConnectIPLinkDialog extends javax.swing.JDialog {
    private String dPort;
    boolean lite;

    /**
     * Creates new form ConnectIPLinkDialog
     */
    public ConnectIPLinkDialog(java.awt.Frame parent, boolean modal, boolean lite) {
        super(parent, modal);
        this.lite = lite;
        setTitle("Connect to Stream");
        initComponents();
        
        loadConfiguation();
        if(!lite) {
	        enableEmailAlarms.setSelected(LogMapEntry.default_enableEmail);
	        enableDataLogging.setSelected(LogMapEntry.default_enableStreamLogging);
        }
        else {
        	enableEmailAlarms.setSelected(false);
	        enableDataLogging.setSelected(false);
        }
        enableEmailAlarms.setSelected(LogMapEntry.default_enableEmail);
        lossRatePercent.setText(LogMapEntry.default_lossRateAlarm*100 + "");
        afterCorrectPer.setText(LogMapEntry.default_lossRateCorrectedAlarm*100 + "");
        alarmThresholdTime.setText(LogMapEntry.default_alarmthresholdTime + "");
        enableLossRateAlarm.setSelected(LogMapEntry.default_lossRateAlarmEnabled);
        enableLossRateCorAlarm.setSelected(LogMapEntry.default_lossRateCorrectedAlarmEnabled);
        enableDataLogging.setSelected(LogMapEntry.default_enableStreamLogging);
        
        LogMapEntry.next_lossRateAlarmEnabled = LogMapEntry.default_lossRateAlarmEnabled;
        LogMapEntry.next_lossRateCorrectedAlarmEnabled = LogMapEntry.default_lossRateCorrectedAlarmEnabled;
        LogMapEntry.next_enableEmail = LogMapEntry.default_enableEmail;
        LogMapEntry.next_lossRateAlarm = LogMapEntry.default_lossRateAlarm;
        LogMapEntry.next_lossRateCorrectedAlarm = LogMapEntry.default_lossRateCorrectedAlarm;
        LogMapEntry.next_alarmthresholdTime = LogMapEntry.default_alarmthresholdTime;
        LogMapEntry.next_enableStreamLogging = LogMapEntry.default_enableStreamLogging;
        LogMapEntry.next_useDefault = (lite)?false:true;
        
        useDefaultBox.setSelected((lite)?false:true);
        useDefaultSet((lite)?false:(!(useDefaultBox.isSelected())));
        if(lite)useDefaultBox.setEnabled(false);
    }

    public void loadConfiguation()     
    {
        try
        {
        	String ipaddress = (lite)?configlite.get("Last.IP").toString():config.get("Last.IP").toString();
            String index= (lite)?configlite.get("Last.Index").toString():config.get("Last.Index").toString();
            String dpo = config.get("Last.DPort").toString();
            ipAddress.setText(ipaddress);
            streamIndex.setText(index);
            destPort.setText(dpo);
            //EnableLoggingCheckBox.setSelected(true);
            
        }
        catch (Exception e)
        {
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ipAddress = new javax.swing.JTextField();
        streamIndex = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        enableLossRateAlarm = new javax.swing.JCheckBox();
        lossRatePercent = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        enableLossRateCorAlarm = new javax.swing.JCheckBox();
        afterCorrectPer = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        alarmThresholdLabel2 = new javax.swing.JLabel();
        alarmThresholdTime = new javax.swing.JTextField();
        AlarmThresholdLabel1 = new javax.swing.JLabel();
        enableEmailAlarms = new javax.swing.JCheckBox();
        useDefaultBox = new javax.swing.JCheckBox();
        enableDataLogging = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        destPort = new javax.swing.JTextField();

        jLabel3.setText("IP Address");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("IP Address");

        jLabel2.setText("Stream Index");

        ipAddress.setText("192.168.1.1");
        ipAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipAddressActionPerformed(evt);
            }
        });

        streamIndex.setText("1");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Alarm Settings"));

        enableLossRateAlarm.setText("% Loss Rate greater than ");
        enableLossRateAlarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableLossRateAlarmActionPerformed(evt);
            }
        });

        lossRatePercent.setText("5");
        lossRatePercent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lossRatePercentActionPerformed(evt);
            }
        });

        jLabel7.setText("%");

        enableLossRateCorAlarm.setText("% Loss Rate after correction greater than ");
        enableLossRateCorAlarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableLossRateCorAlarmActionPerformed(evt);
            }
        });

        afterCorrectPer.setText("1");

        jLabel8.setText("%");

        alarmThresholdLabel2.setText("seconds");

        alarmThresholdTime.setText("30");
        alarmThresholdTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alarmThresholdTimeActionPerformed(evt);
            }
        });

        AlarmThresholdLabel1.setText("  Alarm Threshold Time");

        enableEmailAlarms.setText("Enable Email Alarms");
        enableEmailAlarms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableEmailAlarmsActionPerformed(evt);
            }
        });

        useDefaultBox.setText("Use Default");
        useDefaultBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useDefaultBoxActionPerformed(evt);
            }
        });

        enableDataLogging.setText("Enable Logging");
        enableDataLogging.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableDataLoggingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(AlarmThresholdLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alarmThresholdTime, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alarmThresholdLabel2)
                        .addGap(117, 117, 117))
                    .addComponent(useDefaultBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(enableLossRateCorAlarm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(afterCorrectPer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(enableLossRateAlarm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lossRatePercent, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(enableEmailAlarms)
                        .addGap(40, 40, 40)
                        .addComponent(enableDataLogging, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enableLossRateAlarm)
                    .addComponent(lossRatePercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(afterCorrectPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(enableLossRateCorAlarm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AlarmThresholdLabel1)
                    .addComponent(alarmThresholdTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alarmThresholdLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enableEmailAlarms)
                    .addComponent(enableDataLogging))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(useDefaultBox)
                .addGap(67, 67, 67))
        );

        jLabel4.setText("Port");

        destPort.setText("50000");
        destPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destPortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(streamIndex)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ipAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(destPort)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(destPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(streamIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
       
    iPAddress = ipAddress.getText();
    dPort = destPort.getText();
    stream = streamIndex.getText();
   // enableLogging = EnableLoggingCheckBox.isSelected();
   //Add Validation Check
    
    if (!stream.matches("\\d|1[012]"))
    {
        JOptionPane.showMessageDialog(this, "Stream must be a valid interget between 1-12");
        return;
    }
     if (!iPAddress.matches("([01]?\\d\\d?|2([0-4]\\d|5[0-5]))(\\.([01]?\\d\\d?|2([0-4]\\d|5[0-5]))){3}"))
    {
        JOptionPane.showMessageDialog(this, "IP Address is not valid");
        return;
    }
     if (!dPort.matches("(\\d+)"))
    {
        JOptionPane.showMessageDialog(this, "Port not valid");
        return;
    }
   
        LogMapEntry.next_enableEmail = enableEmailAlarms.isSelected();
         try 
        {
            LogMapEntry.next_lossRateAlarm = Double.parseDouble(lossRatePercent.getText())/100;
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "Loss Rate alarm is not valid");
            return;
        }
        try 
        {
            LogMapEntry.next_lossRateCorrectedAlarm = Double.parseDouble(afterCorrectPer.getText())/100;
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "Loss Rate alarm after correction is not valid");
            return;
        }
        
        try
        {
            int value = Integer.parseInt(alarmThresholdTime.getText());
            if (value < 5)
            {
               JOptionPane.showMessageDialog(this.getParent(),"Minimum alarm threshold time is 5 seconds");
               value = 5;
               LogMapEntry.next_alarmthresholdTime = value;
            }
            else if ((value % 5)>0)
            {
                value = value - (value % 5);
            }
            LogMapEntry.next_alarmthresholdTime = value;
            
        }
        catch ( NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this.getParent(),"Invalid alarm threshold");
            return;
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this.getParent(),"Invalid alarm threshold");
            return;
        }
        LogMapEntry.next_lossRateAlarmEnabled = enableLossRateAlarm.isSelected();
        LogMapEntry.next_lossRateCorrectedAlarmEnabled = enableLossRateCorAlarm.isSelected();
        LogMapEntry.next_useDefault = useDefaultBox.isSelected();
        LogMapEntry.next_enableStreamLogging = enableDataLogging.isSelected();
     
     
        if(!lite) {
        	config.put("Last.IP",iPAddress);
    	    config.put("Last.Index",stream);
    	    config.save();
        }
        else {
        	configlite.put("Last.IP",iPAddress);
    	    configlite.put("Last.Index",stream);
    	    configlite.save();
        }
        
    //JOptionPane.showMessageDialog(this, enableLogging);
    setVisible(false);
    dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void ipAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ipAddressActionPerformed

    private void enableLossRateAlarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableLossRateAlarmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enableLossRateAlarmActionPerformed

    private void lossRatePercentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lossRatePercentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lossRatePercentActionPerformed

    private void enableLossRateCorAlarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableLossRateCorAlarmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enableLossRateCorAlarmActionPerformed

    private void alarmThresholdTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alarmThresholdTimeActionPerformed

        // TODO add your handling code here:

    }//GEN-LAST:event_alarmThresholdTimeActionPerformed

    private void enableEmailAlarmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableEmailAlarmsActionPerformed

    }//GEN-LAST:event_enableEmailAlarmsActionPerformed

    private void useDefaultBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useDefaultBoxActionPerformed

        // TODO add your handling code here:
        /*enableLossRateAlarm.setEnabled(useDefaultBox.isSelected());
        enableLossRateCorAlarm.setEnabled(useDefaultBox.isSelected());
        lossRatePercent.setEnabled(useDefaultBox.isSelected());
        afterCorrectPer.setEnabled(useDefaultBox.isSelected());
        enableEmailAlarms.setEnabled(useDefaultBox.isSelected());
        enableDataLogging.setEnabled(useDefaultBox.isSelected());*/

        useDefaultSet(!(useDefaultBox.isSelected()));

    }//GEN-LAST:event_useDefaultBoxActionPerformed

        private void useDefaultSet (boolean b)
    {
        enableLossRateAlarm.setEnabled(b);
        enableLossRateCorAlarm.setEnabled(b);
        lossRatePercent.setEnabled(b);
        afterCorrectPer.setEnabled(b);
        enableEmailAlarms.setEnabled(b);
        enableDataLogging.setEnabled(b);
        alarmThresholdTime.setEnabled(b);
        AlarmThresholdLabel1.setEnabled(b);
        alarmThresholdLabel2.setEnabled(b);
        
    }
    private void enableDataLoggingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableDataLoggingActionPerformed

        // TODO add your handling code here:

    }//GEN-LAST:event_enableDataLoggingActionPerformed

    private void destPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destPortActionPerformed

    String iPAddress;
    String stream;
    //boolean enableLogging;

    public String getiPAddress() {
        return iPAddress;
    }

    public void setiPAddress(String iPAddress) {
        this.iPAddress = iPAddress;
    }
    
    public String getDPort() {
        return dPort;
    }

    public void setDPort(String dPort) {
        this.dPort = dPort;
    }

    public String getStream() {
        return stream;
    }

    public void setStream(String stream) {
        this.stream = stream;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AlarmThresholdLabel1;
    private javax.swing.JTextField afterCorrectPer;
    private javax.swing.JLabel alarmThresholdLabel2;
    private javax.swing.JTextField alarmThresholdTime;
    private javax.swing.JTextField destPort;
    private javax.swing.JCheckBox enableDataLogging;
    private javax.swing.JCheckBox enableEmailAlarms;
    private javax.swing.JCheckBox enableLossRateAlarm;
    private javax.swing.JCheckBox enableLossRateCorAlarm;
    private javax.swing.JTextField ipAddress;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField lossRatePercent;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField streamIndex;
    private javax.swing.JCheckBox useDefaultBox;
    // End of variables declaration//GEN-END:variables
}
